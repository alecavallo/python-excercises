"""Create time_slots table

Revision ID: f6b223fbca55
Revises:
Create Date: 2025-09-29 16:54:23.429351

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f6b223fbca55"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "time_slots",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=False),
        sa.Column("is_booked", sa.Boolean(), nullable=False),
        sa.Column("booked_by_email", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_time_slots_id"), "time_slots", ["id"], unique=False)

    # Seed all time slots for September 30, 2025 (9:00 AM to 5:00 PM)
    from datetime import datetime, timedelta

    target_date = datetime(2025, 9, 30)  # September 30, 2025
    start_hour = 9  # 9:00 AM
    end_hour = 17  # 5:00 PM

    time_slots_table = sa.table(
        "time_slots",
        sa.column("start_time", sa.DateTime),
        sa.column("end_time", sa.DateTime),
        sa.column("is_booked", sa.Boolean),
        sa.column("booked_by_email", sa.String),
    )

    slots_data = []
    for hour in range(start_hour, end_hour):
        for minute in [0, 30]:  # 30-minute intervals
            slot_start = target_date.replace(
                hour=hour, minute=minute, second=0, microsecond=0
            )
            slot_end = slot_start + timedelta(minutes=30)
            slots_data.append(
                {
                    "start_time": slot_start,
                    "end_time": slot_end,
                    "is_booked": False,
                    "booked_by_email": None,
                }
            )

    op.bulk_insert(time_slots_table, slots_data)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_time_slots_id"), table_name="time_slots")
    op.drop_table("time_slots")
    # ### end Alembic commands ###
